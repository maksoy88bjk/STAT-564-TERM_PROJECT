---
title: "Daily Rainfall Modelling using Lasso, Ridge and Elastic-Net Regressions in one of the automated-weather observation station in Mugla Province of Türkiye"
author: 
  - name: Mehmet AKSOY *(aksoy.mehmet@metu.edu.tr)*
    affiliations:
    - ref: metu
    - ref: civil
  - name: Sercan AKIL  *(sercan.akil@metu.edu.tr)*
    affiliations:
    - ref: metu
    - ref: ggit
  - name: Deniz Güvenç TEK  *(deniz.tek@metu.edu.tr)*
    affiliations:
    - ref: metu
    - ref: stat
affiliations:
  - id: metu
    name: Middle East Technical University, Ankara, Türkiye
  - id: civil
    name: Department of Civil Engineering
  - id: ggit
    name: Geodetic and Geographic Information Technologies
  - id: stat
    name: Department of Statistics
format: 
  html:
    editor: visual
    toc: true
    number-sections: true
---

## Introduction

Data period is between 01.01.2009 and 31.12.2023 for Mugla Station (17292). Elevation of the station is 646 meter.

## Works in R

### Uploading Necessary Packages

```{r}
#| warning: false
library(readxl)
library(tidyverse)
library(lubridate)
library(corrplot)
library(rnaturalearth)
library(sf)

```

### Study Location

```{r, fig.width=9,fig.height=6}
#| warning: false
#| 
rnaturalearth::ne_countries(scale='medium',returnclass = 'sf') |> 
ggplot()  + geom_sf(fill = "white") +
  geom_point(aes(x=28.3668,y=37.2095),size=4) + labs(x="",y="") + 
  coord_sf(crs = st_crs(4326), xlim = c(23, 31), ylim = c(35,39)) + 
  theme_bw() + 
  theme(legend.position = "none",
        panel.background = element_rect(fill = 'aliceblue')) +
  annotate(geom="text", x=29, y=35.5, label="MEDITERRANEAN SEA", 
        color="cornflowerblue", fontface = "bold.italic", size=4) + 
  annotate(geom="text", x=30, y=38.5, label="TURKIYE", 
        color="darkgray", fontface = "bold.italic", size=4) +
  annotate(geom="text", x=23.1, y=38.4, label="GREECE", 
        color="darkgray", fontface = "bold.italic", size=4) + 
  annotate(geom="text", x=28.7, y=37.3, label="Mugla Station \n 17292", 
        color="black", fontface = "bold.italic", size=4)
```

### Data Handling

```{r}

files<- list.files(paste0(here::here(),"/DATA"), pattern = "xlsx")
listem<- list()
missdates<- list()

for(i in 1:length(files)) {

  listem[[i]] <- read_excel( paste0(here::here(),"/DATA/", files[i]))
  listem[[i]] <- listem[[i]][ ,-c(1,2)]

  listem[[i]]<-
    listem[[i]] |>
    mutate(DATE= as.Date(with(listem[[i]], paste(YEAR,MONTH,DAY,sep="-")),"%Y-%m-%d")) |>
    complete(DATE = seq(as.Date("2009-01-01"),
                         as.Date("2023-12-31"), by = "day"))
  listem[[i]] <- listem[[i]] [,-c(2:4)]
  missdates[[i]]<- listem[[i]][which(is.na(listem[[i]] [,2] )),]
}

df<- listem[[1]]
for(i in 1:(length(files)-1)) {
  df <- merge(df, listem[[i+1]], by = "DATE", all = TRUE)
}

write.table(df, "merge.txt", row.names = FALSE, quote = FALSE, sep = "\t")
```

### Descriptive Statistics

```{r}
#| warning: false

head(df)
summary(df)
```

### Visualization of the Data

```{r, fig.width=9,fig.height=9}
#| warning: false

paletr<- c("#053061", "#2166AC" ,"#4393C3" ,"#92C5DE" ,
           "#F4A582", "#D6604D" ,"#B2182B", "#67001F")
corrplot(round(cor(df[,2:18], method = "pearson", use = "complete.obs"),2), 
         method="color", col=paletr,  
         type="upper",  
         addCoef.col = "white", 
         tl.col="black",  insig = "blank", 
         diag=FALSE )
```

```{r, fig.width=9,fig.height=9}
#| warning: false

variable_names <- 
c("Precipitation", "Minimum Temperature", "Maximum Temperature", 
  "Average Temperature", "Minimum Dewpoint Temperature", 
  "Maximum Dewpoint Temperature", "Average Dewpoint Temperature",
  "Minimum Relative Humidity", "Maximum Relative Humidity", 
  "Average Relative Humidity", "Cloudiness", "Air Pressure", 
  "Average Wind Direction", "Average Wind Speed", 
  "Evapotranspiration", "Solar Radiation", "Sun Exposure")
colnames(df) <- append("Date", variable_names)

df_plot<-
df |>
  pivot_longer(
    cols = -c(1),
    values_drop_na = FALSE)
df_plot$name <- factor(df_plot$name, levels = colnames(df)[2:18])

ggplot(df_plot, aes(x= Date, y=value,color=name)) + 
  geom_line(size=0.1) + facet_wrap(~name, scales = "free_y", ncol=3) + 
  theme_bw() + labs(x=" ",y=" ") + 
  theme(legend.position = "none",
        strip.background = element_rect(fill="white")) 
```

```{r, fig.width=9,fig.height=9}
#| warning: false

ggplot(df_plot, aes(x= Date, y=value, fill=name, group=year(Date))) +
  geom_boxplot(outlier.shape = NA, alpha=0.7) + facet_wrap(~name, scales = "free_y", ncol=3) +
  theme_bw() + labs(x=" ",y=" ") +
  theme(legend.position = "none",
        strip.background = element_rect(fill="white")) 
```

### EDA of the Precipitation

#### Missing Value

```{r}

head(df)
df_pre=df[,c(1,2)]
head(df_pre)

#Calculating the number of null values if there is one.

pre_null_values= sum(is.na(df_pre$Precipitation))
print(paste("Number of Null Values in Precipitation Column:",pre_null_values))

```

#### Time Series Plot of the Precipitation Data

```{r}
missing_date= df_pre$Date[is.na(df_pre$Precipitation)]
missing_date

library(ggplot2)

#Time Series Plot of Precipitation (with Missing Data Highlighted (2009-2024)
ggplot(df_pre, aes(x = Date, y = Precipitation)) +
  geom_line(color = "red", size = 0.5,alpha=0.5) +  # Continuous line plot
  geom_smooth(method = "loess", se = FALSE, color = "orange", size = 1.5) +  #Trend line
  geom_point(aes(color = !is.na(Precipitation)), size = 1,alpha=0.5, shape = 21, fill = "white", show.legend = FALSE) +
  geom_text(data = subset(df_pre, is.na(Precipitation)), aes(label = "NA", y = 0), vjust = -0.5, color = "blue",size= 3) +  # Marking NAs
  scale_color_manual(values = c("black", "red")) +  # Red points for non-missing data
  labs(title = "Time Series Plot of Precipitation Data (2009-2024)",
       x = "Date",
       y = "Precipitation (mm)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5)) #Centering the title

#Time Series Plot of Precipitation (with Missing Data Highlighted (2021-2024)

df_pre_p1= filter(df_pre, Date>= as.Date("2021-01-01"))


ggplot(df_pre_p1, aes(x = Date, y = Precipitation)) +
  geom_line(color = "red", size = 1) +  # Plotting the precipitation data
  geom_point(aes(color = !is.na(Precipitation)), size = 2, shape = 21, fill = "white", show.legend = FALSE) +
  scale_color_manual(values = c("orange", "red")) +  # Use red points to mark non-missing data
  labs(title = "Time Series Plot of Precipitation Data (2021-2024)",
       x = "Date",
       y = "Precipitation (mm)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve readability of x-axis labels

```

According to the time series plot of the precipitation, there is no specific long-term trend (orange line) over the years. 4 of the 5 null values are found sequentially and one of them is located in "2012-11-09". The plot exhibits high volatility and also might be observed some seasonality (clearly observed in plot 2).

#### **Seasonality Analyze**

```{r}
#Seasonal Decomposition
#Mean Imputation for NA values
df_pre1=df_pre
mean_imput=mean(df_pre1$Precipitation,na.rm=TRUE)
df_pre1$Precipitation[is.na(df_pre1$Precipitation)]=mean_imput
df_pre_ts= ts(df_pre1$Precipitation, frequency = 365)

library(forecast)
library(tseries)
library(seasonal)
library(stats)
library(gridExtra)
library(grid)

result_stl <- stl(df_pre_ts, s.window = "periodic")
plot(result_stl)


ljung_box_result= Box.test(df_pre1$Precipitation, lag= 365, type= "Ljung-Box")
print(ljung_box_result)

```

-   Ho: No auto correlation for lags=365

-   H1: Some auto correlation for lags=365

Since the p-value is less than 0.05 we suggest that there is some autocorrelation for lags=365 in Precipitation data which is a strong indication of seasonality. Also, we can clearly observe seasonality in the Seasonality Component plot.

#### **Stationarity Analyze**

```{r}
adf_test= adf.test(df_pre1$Precipitation, alternative = "stationary")
print(adf_test)


```

-   Ho: The time series is non-stationary

-   H1: The time series is stationary

Since our p-value is less than 0.05, it can be concluded that the time series is stationary. That means that the mean, variance and autocorrelation of the series do not change over the years. Since we satisfied the assumption of stationary we can perform Statistical Models as well as Machine Learning Approaches.
